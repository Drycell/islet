name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: "0 15 * * *"

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: [ code-default ]
    container: art.sec.samsung.net/docker-remote/rust:latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: Install sudo
      run: |
        apt update && apt install sudo

    - name: Run scripts/init.sh
      run: ./scripts/init.sh

    - name: Run scripts/build.sh
      run: ./scripts/build.sh

    - name: Archive binaries
      uses: actions/upload-artifact@v2
      with:
        name: binaries
        path: |
          out/*.bin

  coding-style:
    runs-on: [ code-default ]
    container: art.sec.samsung.net/docker-remote/rust:latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: Install rustfmt
      run: rustup component add rustfmt

    - name: Check bash scripts
      run: ./assets/formatter/shfmt -d -ci -bn -fn `find scripts/. -name *.sh`

    - name: Check rust code
      run: cargo fmt --all -- --check

  test:
    runs-on: [ code-default ]
    container:
      image: art.sec.samsung.net/docker-remote/rust:latest
      options: --security-opt seccomp=unconfined

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: Install sudo
      run: |
        apt update && apt install sudo

    - name: Run scripts/init.sh
      run: ./scripts/init.sh

    - name: Run scripts/test.sh --unit-test
      run: ./scripts/test.sh --unit-test

    - name: Publish unit test results
      uses: code-actions/EnricoMi-publish-unit-test-result-action@v1
      if: always()
      with:
        files: out/test.xml

    - name: Run scripts/test.sh --coverage
      if: always()
      run: ./scripts/test.sh --coverage

    - name: Archive junit
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: test
        path: |
          out/test.xml

    - name: Archive coverage result
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: coverage
        path: |
          out/coverage

    - name: Archive badges
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: badge
        path: |
          out/*.svg

  badge-testhub:
    needs: test
    if: always() && github.event_name == 'push'
    runs-on: [ code-default ]

    steps:
    - name: Install inkscape
      run: |
        apt install -y -qq --no-install-recommends inkscape

    - uses: actions/download-artifact@v2
      with:
        name: badge

    - name: Upload badge to artifactories
      env:
        ART_KEY: ${{ secrets.ART_KEY }}
      run: |
        ls -lah .
        inkscape -e test.png test.svg
        curl -H "X-JFrog-Art-Api:${ART_KEY}" -T test.png https://art.sec.samsung.net/artifactory/rs8-dsca-da_generic/status/arm-cca/test.png
        inkscape -e coverage.png coverage.svg
        curl -H "X-JFrog-Art-Api:${ART_KEY}" -T coverage.png https://art.sec.samsung.net/artifactory/rs8-dsca-da_generic/status/arm-cca/coverage.png

    - name: Send to TestHub
      uses: CODE-Actions/testhub@v1
      with:
        test-tool: junit
        test-artifact-name: test
        coverage-tool: gcov
        coverage-artifact-name: coverage
        sub-project: arm-cca
        plm-prj-code: RAJ0122ZZ-29RF
        release-key: SRRELEASE-1155

  documentation:
    if: always() && github.event_name == 'push'
    runs-on: [ code-default ]
    container: art.sec.samsung.net/docker-remote/rust:latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: Install sudo
      run: |
        apt update && apt install sudo

    - name: Run scripts/init.sh
      run: ./scripts/init.sh

    - name: Make documentation
      run: |
        ./scripts/make_doc.sh
        mv out/book ..
        rm -Rf out

    - name: Config git
      env:
        USER_NAME: ${{ github.event.pusher.name }}
        USER_EMAIL: ${{ github.event.pusher.email }}
      run: |
        git config --global user.email "$USER_EMAIL"
        git config --global user.name "$USER_NAME"

    - name: Install deploy key
      env:
        GH_PAGES_DEPLOY_KEY: ${{ secrets.GH_PAGES_DEPLOY_KEY }}
      run: |
        mkdir -p /root/.ssh/
        echo "${GH_PAGES_DEPLOY_KEY}" > /root/.ssh/id_rsa
        ssh-keyscan -t rsa -H github.sec.samsung.net >> /root/.ssh/known_hosts
        chmod 600 /root/.ssh/*

    - name: Add files to the commit
      run: |
        git fetch origin
        git checkout origin/gh-pages
        git clean -f -d
        rm -Rf assets tf-a-tests trusted-firmware-a
        cp -Rf ../book/* .
        git add *
        git commit --amend --no-edit

    - name: Push the commit
      run: |
        git remote add origin-ssh git@github.sec.samsung.net:SYSSEC/arm-cca.git
        git push -f origin-ssh HEAD:gh-pages

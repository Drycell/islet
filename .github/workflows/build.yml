name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: "0 15 * * *"

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: [ code-default ]
    container:
      image: art.sec.samsung.net/syssec_docker/cca_build:latest
      options: -v /dev:/dev --privileged=true
    steps:
    - uses: actions/checkout@v2

    - name: Checkout submodules
      run: |
        rm -Rf assets
        ln -sf /root/assets assets
        sed -i 's/github.sec.samsung/${{secrets.GITHUB_TOKEN}}:${{secrets.GITHUB_TOKEN}}@github.sec.samsung/' .gitmodules
        git submodule update --init build trusted-firmware-a tf-a-tests vm-image

    - name: Build components
      run: ./scripts/fvp-cca --build-only -nw=tf-a-tests

    - name: Archive binaries
      uses: actions/upload-artifact@v2
      with:
        name: binaries
        path: |
          out/*.bin

  coding-style:
    runs-on: [ code-default ]
    container: art.sec.samsung.net/syssec_docker/cca_build:latest
    steps:
    - uses: actions/checkout@v2

    - name: Checkout submodules
      run: |
        rm -Rf assets
        ln -sf /root/assets assets

    - name: Check bash scripts
      run: ./assets/formatter/shfmt -d -ci -bn -fn `find scripts/. -name *.sh`

    - name: Check rust code
      run: cargo fmt --all -- --check

  test:
    runs-on: [ code-default ]
    container:
      image: art.sec.samsung.net/syssec_docker/cca_build:latest
      options: --security-opt seccomp=unconfined

    steps:
    - uses: actions/checkout@v2

    - name: Checkout submodules
      run: |
        rm -Rf assets
        ln -sf /root/assets assets

    - name: Run scripts/test.sh --unit-test
      run: ./scripts/test.sh --unit-test

    - name: Publish unit test results
      uses: code-actions/EnricoMi-publish-unit-test-result-action@v1
      if: always()
      with:
        files: out/test.xml

    - name: Run scripts/test.sh --coverage
      if: always()
      run: ./scripts/test.sh --coverage

    - name: Archive junit
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: test
        path: |
          out/test.xml

    - name: Archive coverage result
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: coverage
        path: |
          out/coverage

    - name: Archive badges
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: badge
        path: |
          out/*.svg

  badge:
    needs: test
    if: always() && github.event_name == 'push'
    runs-on: [ code-default ]

    steps:
    - name: Install inkscape
      run: |
        apt install -y -qq --no-install-recommends inkscape

    - uses: actions/download-artifact@v2
      with:
        name: badge

    - name: Upload badge to artifactories
      env:
        ART_KEY: ${{ secrets.ART_KEY }}
      run: |
        ls -lah .
        inkscape -e test.png test.svg
        curl -H "X-JFrog-Art-Api:${ART_KEY}" -T test.png https://art.sec.samsung.net/artifactory/syssec_generic/arm-cca/test.png
        inkscape -e coverage.png coverage.svg
        curl -H "X-JFrog-Art-Api:${ART_KEY}" -T coverage.png https://art.sec.samsung.net/artifactory/syssec_generic/arm-cca/coverage.png

  testhub:
    needs: test
    if: always() && ( github.event_name == 'push' || github.event_name == 'schedule' )
    runs-on: [ code-default ]

    steps:
    - name: Send to TestHub
      uses: CODE-Actions/testhub@v1
      with:
        test-tool: junit
        test-artifact-name: test
        coverage-tool: gcov
        coverage-artifact-name: coverage
        sub-project: arm-cca
        plm-prj-code: RAJ0122ZZ-29RF
        release-key: SRRELEASE-1155

  run-fvp:
    needs: build
    if: always() && github.event_name == 'pull_request'
    runs-on: [ code-default ]
    container:
      image: art.sec.samsung.net/syssec_docker/cca_build:latest

    steps:
    - uses: actions/checkout@v2

    - name: Checkout submodules
      run: |
        rm -Rf assets
        ln -sf /root/assets assets

    - uses: actions/download-artifact@v2
      with:
        name: binaries
        path: out

    - name: Run tf-a-tests on FVP
      run: |
        sed -i "s/..\/..\/..\/..\/../$(pwd | sed "s/\//\\\\\//g")/" scripts/.config
        ./scripts/fvp-cca -nw=tf-a-tests -ro &
        sleep 20
        echo 'UART0_LOG<<EOF_GITHUB_ENV' >> $GITHUB_ENV
        cat out/uart0.log >> $GITHUB_ENV
        echo '\nEOF_GITHUB_ENV' >> $GITHUB_ENV
        echo 'UART1_LOG<<EOF_GITHUB_ENV' >> $GITHUB_ENV
        cat out/uart1.log >> $GITHUB_ENV
        echo '\nEOF_GITHUB_ENV' >> $GITHUB_ENV
        echo 'UART2_LOG<<EOF_GITHUB_ENV' >> $GITHUB_ENV
        cat out/uart2.log >> $GITHUB_ENV
        echo '\nEOF_GITHUB_ENV' >> $GITHUB_ENV
        echo 'UART3_LOG<<EOF_GITHUB_ENV' >> $GITHUB_ENV
        cat out/uart3.log >> $GITHUB_ENV
        echo '\nEOF_GITHUB_ENV' >> $GITHUB_ENV
        echo 'OUTPUT_REVIEW_TOKEN<<EOF_GITHUB_ENV' >> $GITHUB_ENV
        curl -sL https://art.sec.samsung.net/artifactory/syssec_generic/arm-cca/gh_token.txt >> $GITHUB_ENV
        echo '\nEOF_GITHUB_ENV' >> $GITHUB_ENV

#    - name: Create comment to PR
#      continue-on-error: true
#      uses: actions/github-script@v2
#      with:
#        github-token: ${{ env.OUTPUT_REVIEW_TOKEN }}
#        script: |
#          const ref = "${{github.ref}}"
#          const pull_number = Number(ref.split("/")[2])
#
#          await github.pulls.createReview({
#            ...context.repo,
#            pull_number,
#            body: "## Outputs\n" +
#              "### UART0\n" +
#              "<details><summary>접기/펼치기</summary><div markdown='1'>\n" +
#              "\n```\n" + process.env.UART0_LOG + "\n```\n" +
#              "</div></details>\n\n" +
#              "### UART1\n" +
#              "<details><summary>접기/펼치기</summary><div markdown='1'>\n" +
#              "\n```\n" + process.env.UART1_LOG + "\n```\n" +
#              "</div></details>\n\n" +
#              "### UART2\n" +
#              "<details><summary>접기/펼치기</summary><div markdown='1'>\n" +
#              "\n```\n" + process.env.UART2_LOG + "\n```\n" +
#              "</div></details>\n\n" +
#              "### UART3\n" +
#              "<details><summary>접기/펼치기</summary><div markdown='1'>\n" +
#              "\n```\n" + process.env.UART3_LOG + "\n````\n" +
#              "</div></details>\n\n",
#            event: "COMMENT"
#          })

  documentation:
    if: always() && github.event_name == 'push'
    runs-on: [ code-default ]
    container: art.sec.samsung.net/syssec_docker/cca_build:latest

    steps:
    - uses: actions/checkout@v2

    - name: Checkout submodules
      run: |
        mv assets assets-backup
        ln -sf /root/assets assets

    - name: Make documentation
      run: |
        ./scripts/make_doc.sh
        mv out/book ..
        rm -Rf out

    - name: Config git
      env:
        USER_NAME: ${{ github.event.pusher.name }}
        USER_EMAIL: ${{ github.event.pusher.email }}
      run: |
        git config --global user.email "$USER_EMAIL"
        git config --global user.name "$USER_NAME"

    - name: Install deploy key
      env:
        GH_PAGES_DEPLOY_KEY: ${{ secrets.GH_PAGES_DEPLOY_KEY }}
      run: |
        mkdir -p /root/.ssh/
        echo "${GH_PAGES_DEPLOY_KEY}" > /root/.ssh/id_rsa
        ssh-keyscan -t rsa -H github.sec.samsung.net >> /root/.ssh/known_hosts
        chmod 600 /root/.ssh/*

    - name: Add files to the commit
      run: |
        rm -Rf assets
        mv assets-backup assets
        git fetch origin
        git checkout -- .gitmodules
        git checkout origin/gh-pages
        git clean -f -d
        rm -Rf assets tf-a-tests trusted-firmware-a
        cp -Rf ../book/* .
        git add *
        git commit --amend --no-edit

    - name: Push the commit
      run: |
        git remote add origin-ssh git@github.sec.samsung.net:SYSSEC/arm-cca.git
        git push -f origin-ssh HEAD:gh-pages

  build-docker:
    if: always() && github.event_name == 'push'
    runs-on: [ code-default ]
    env:
      ART_USER: sungbae.yoo
      ART_DOMAIN: art.sec.samsung.net
      ART_DOCKER_REPO: syssec_docker
      ART_DOCKER_SUBTAG: cca_build:latest
      ART_URL: https://art.sec.samsung.net/artifactory
      ART_KEY: ${{ secrets.ART_KEY }}

    steps:
    - uses: actions/checkout@v2

    - name: Checkout submodules
      run: |
        git lfs install assets
        sed -i 's/github.sec.samsung/${{secrets.GITHUB_TOKEN}}:${{secrets.GITHUB_TOKEN}}@github.sec.samsung/' .gitmodules
        git submodule update --init assets

    - name : Preparing jfrog
      run: curl -XGET https://art.sec.samsung.net/artifactory/tools/art/jfrog -L -k > jfrog && chmod u+x jfrog

    - name: Building docker image
      run: |
        docker build -t ${ART_DOMAIN}/${ART_DOCKER_REPO}/${ART_DOCKER_SUBTAG} .

    - name: Pushing docker image to artifactory
      run: |
        ./jfrog rt config --url ${ART_URL} --user ${ART_USER} --password ${ART_KEY} --interactive=false
        ./jfrog rt docker-push ${ART_DOMAIN}/${ART_DOCKER_REPO}/${ART_DOCKER_SUBTAG} ${ART_DOCKER_REPO} --build-name=${GITHUB_REPOSITORY} --build-number=${GITHUB_SHA}
        ./jfrog rt bag ${GITHUB_REPOSITORY} ${GITHUB_SHA} .
